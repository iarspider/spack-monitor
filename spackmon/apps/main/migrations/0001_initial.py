# Generated by Django 3.2.8 on 2021-10-07 19:50

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Architecture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('platform', models.CharField(help_text='The platform (e.g., linux)', max_length=50)),
                ('platform_os', models.CharField(help_text='The platform operating system', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Build',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('status', models.CharField(choices=[('CANCELLED', 'CANCELLED'), ('SUCCESS', 'SUCCESS'), ('NOTRUN', 'NOTRUN'), ('FAILED', 'FAILED')], default='NOTRUN', help_text='The status of the spec build.', max_length=25)),
                ('config_args', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BuildPhase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('output', models.TextField(blank=True, null=True)),
                ('error', models.TextField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('SUCCESS', 'SUCCESS'), ('FAILED', 'FAILED')], help_text='The status of the phase, if run.', max_length=50, null=True)),
                ('name', models.CharField(help_text='The name of the install file, with user prefix removed', max_length=500)),
                ('build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.build')),
            ],
            options={
                'unique_together': {('build', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Compiler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='The compiler name', max_length=50)),
                ('version', models.CharField(help_text='The compiler version string', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Dependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('dependency_type', models.JSONField(default=list, help_text='The dependency type, e.g., build run')),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='The name of the feature', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='The name of the target (e.g., skylake)', max_length=50, unique=True)),
                ('vendor', models.CharField(blank=True, help_text='The vendor for the target (e.g., GenuineIntel', max_length=50, null=True)),
                ('generation', models.PositiveIntegerField(blank=True, null=True)),
                ('features', models.ManyToManyField(blank=True, default=None, related_name='target_features', related_query_name='target_features', to='main.Feature')),
                ('parents', models.ManyToManyField(blank=True, default=None, related_name='targets', related_query_name='targets', to='main.Target')),
            ],
        ),
        migrations.CreateModel(
            name='Spec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('spack_version', models.CharField(help_text='The version of spack', max_length=250)),
                ('full_hash', models.CharField(blank=True, help_text='The full hash', max_length=50, null=True)),
                ('name', models.CharField(help_text='The spec name (without version)', max_length=250)),
                ('build_hash', models.CharField(blank=True, help_text='The build hash', max_length=50, null=True)),
                ('hash', models.CharField(help_text='The hash', max_length=50)),
                ('package_hash', models.CharField(blank=True, help_text='The spec hash', max_length=250, null=True)),
                ('namespace', models.CharField(blank=True, help_text='The spec namespace', max_length=250, null=True)),
                ('version', models.CharField(blank=True, help_text='The spec version', max_length=50, null=True)),
                ('parameters', models.JSONField(blank=True, default=dict, null=True)),
                ('arch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.architecture')),
                ('compiler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='main.compiler')),
                ('dependencies', models.ManyToManyField(blank=True, default=None, related_name='dependencies_for_spec', related_query_name='dependencies_for_spec', to='main.Dependency')),
            ],
            options={
                'unique_together': {('name', 'full_hash', 'spack_version')},
            },
        ),
        migrations.CreateModel(
            name='InstallFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='The name of the install file, with user prefix removed', max_length=500, unique=True)),
                ('ftype', models.CharField(blank=True, help_text='The type of install file', max_length=25)),
                ('mode', models.PositiveIntegerField(blank=True, null=True)),
                ('owner', models.PositiveIntegerField(blank=True, null=True)),
                ('group', models.PositiveIntegerField(blank=True, null=True)),
                ('category', models.CharField(blank=True, choices=[('text', 'text'), ('elf shared object', 'elf shared object'), ('static library', 'static library'), ('script with shebang', 'scrip with shebang'), ('other', 'other')], default=None, help_text='The type of file', max_length=25, null=True)),
                ('hash', models.CharField(help_text='The hash of the object', max_length=250)),
                ('build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.build')),
            ],
            options={
                'unique_together': {('build', 'name')},
            },
        ),
        migrations.CreateModel(
            name='EnvironmentVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='The name of the environment variable.', max_length=100)),
                ('value', models.TextField(help_text='The value of the environment variable')),
            ],
            options={
                'unique_together': {('name', 'value')},
            },
        ),
        migrations.AddField(
            model_name='dependency',
            name='spec',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.spec'),
        ),
        migrations.CreateModel(
            name='BuildWarning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('source_file', models.CharField(help_text='The source file.', max_length=150)),
                ('source_line_no', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('line_no', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('repeat_count', models.PositiveIntegerField(default=0)),
                ('start', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('end', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('text', models.TextField()),
                ('pre_context', models.TextField()),
                ('post_context', models.TextField()),
                ('phase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.buildphase')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BuildError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('source_file', models.CharField(help_text='The source file.', max_length=150)),
                ('source_line_no', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('line_no', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('repeat_count', models.PositiveIntegerField(default=0)),
                ('start', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('end', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('text', models.TextField()),
                ('pre_context', models.TextField()),
                ('post_context', models.TextField()),
                ('phase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.buildphase')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BuildEnvironment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('hostname', models.CharField(help_text='The hostname', max_length=150)),
                ('platform', models.CharField(help_text='The platform', max_length=50)),
                ('kernel_version', models.CharField(help_text='The kernel version', max_length=150)),
                ('host_os', models.CharField(help_text='The hostname', max_length=150)),
                ('host_target', models.CharField(help_text='The hostname', max_length=150)),
            ],
            options={
                'unique_together': {('hostname', 'kernel_version', 'host_os', 'host_target', 'platform')},
            },
        ),
        migrations.AddField(
            model_name='build',
            name='build_environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.buildenvironment'),
        ),
        migrations.AddField(
            model_name='build',
            name='envars',
            field=models.ManyToManyField(blank=True, default=None, related_name='build_for_environment', related_query_name='build_for_environment', to='main.EnvironmentVariable'),
        ),
        migrations.AddField(
            model_name='build',
            name='spec',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.spec'),
        ),
        migrations.AddField(
            model_name='build',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='architecture',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.target'),
        ),
        migrations.AlterUniqueTogether(
            name='dependency',
            unique_together={('spec', 'dependency_type')},
        ),
        migrations.AlterUniqueTogether(
            name='build',
            unique_together={('spec', 'build_environment')},
        ),
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('name', models.CharField(help_text='The name of the attribute', max_length=150)),
                ('analyzer', models.CharField(help_text='The name of the analyzer generating the result', max_length=150)),
                ('value', models.TextField(blank=True, help_text='A text based value', null=True)),
                ('binary_value', models.BinaryField(blank=True, help_text='A binary value', null=True)),
                ('install_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.installfile')),
            ],
            options={
                'unique_together': {('name', 'analyzer', 'install_file')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='architecture',
            unique_together={('platform', 'platform_os', 'target')},
        ),
    ]
